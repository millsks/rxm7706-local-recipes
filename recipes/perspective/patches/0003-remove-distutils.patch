From 0f6826c9849f619c60e8a8d49aadadbc07780f20 Mon Sep 17 00:00:00 2001
From: Tim Paine <timothy.paine@cubistsystematic.com>
Date: Wed, 29 Nov 2023 20:12:26 -0500
Subject: [PATCH] Remove usage of deprecated distutils, fixes #2457

---
 perspective/table/_accessor.py  | 17 ++++++++++++++++-
 pyproject.toml               |  6 +++---
 setup.py                     |  6 +++---
 tools/perspective-scripts/_requires_python.mjs  |  2 +-
 4 files changed, 23 insertions(+), 8 deletions(-)

diff --git a/perspective/table/_accessor.py b/perspective/table/_accessor.py
index 515ea4b76..6f24f2980 100644
--- a/perspective/table/_accessor.py
+++ b/perspective/table/_accessor.py
@@ -10,7 +10,6 @@
 #  ┃ of the [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0). ┃
 #  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

-from distutils.util import strtobool
 from math import isnan

 import numpy
@@ -23,6 +22,22 @@ from ._date_validator import _PerspectiveDateValidator
 from .libpsppy import t_dtype


+def strtobool(val):
+    """Convert a string representation of truth to true (1) or false (0).
+
+    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values
+    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if
+    'val' is anything else.
+    """
+    val = val.lower()
+    if val in ("y", "yes", "t", "true", "on", "1"):
+        return 1
+    elif val in ("n", "no", "f", "false", "off", "0"):
+        return 0
+    else:
+        raise ValueError("invalid truth value {!r}".format(val))
+
+
 def _flatten_structure(array):
     """Flatten numpy.recarray or structured arrays into a dict."""
     # recarrays/structured arrays do not have guaranteed bit offsets - make a
diff --git a/pyproject.toml b/pyproject.toml
index 698b6873a..56a400699 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -12,10 +12,10 @@

 [build-system]
 requires = [
-    "setuptools",
-    "wheel",
-    "numpy>=1.13.1,<2",
     "jupyter-packaging==0.12.3",
+    "numpy>=1.13.1,<2",
+    "setuptools==68.2.2",
+    "wheel",
 ]
 build-backend = "jupyter_packaging.build_api"

diff --git a/setup.py b/setup.py
index 589bbca39..acf7869f3 100644
--- a/setup.py
+++ b/setup.py
@@ -20,7 +20,7 @@ import subprocess
 import sys
 import sysconfig
 from codecs import open
-from distutils.version import LooseVersion
+from setuptools._distutils.version import LooseVersion
 from jupyter_packaging import get_data_files, wrap_installers, get_version

 from setuptools import Extension, find_packages, setup
@@ -56,8 +56,8 @@ SKIP_JS_FILES = os.environ.get("PSP_CI_SKIP_JS_FILES_CHECK")
 ########################
 # Get requirement info #
 requires = [
-    "Jinja2>=2.0,<4",
     "ipywidgets>=7.5.1,<9",
+    "Jinja2>=2.0,<4",
     "numpy>=1.21.6,<2",
     "pandas>=0.22.0,<3",
     "python-dateutil>=2.8.0,<3",
@@ -160,7 +160,7 @@ class PSPBuild(build_ext):
         env = os.environ.copy()

         if platform.system() == "Windows":
-            import distutils.msvccompiler as dm
+            import setuptools._distutils.msvccompiler as dm

             # https://wiki.python.org/moin/WindowsCompilers#Microsoft_Visual_C.2B-.2B-_14.0_with_Visual_Studio_2015_.28x86.2C_x64.2C_ARM.29
             msvc = {
--
2.43.0

